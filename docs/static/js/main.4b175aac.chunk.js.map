{"version":3,"sources":["components/Button.js","components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","props","size","Button","text","onClick","ButtonContainer","Display","Input","h1","Result","Calculator","useState","mathString","setMathString","resultElementRef","useRef","callback","result","useMemo","stringMath","addToMathString","value","string","slice","length","stringIsNumeric","animateResult","console","log","current","style","animationName","setTimeout","className","ref","App","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4b175aac.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n    color: white;\n    width: ${props => props.size * 25 + '%'};\n    height: 100px;\n    display: flex;\n    align-items: stretch;\n    font-size: 32px;\n    font-weight: bold;\n    user-select: none;\n\n    >div {\n      border-radius: 10px;\n      align-items: center;\n      justify-content: center;\n      background-color: rgba(255, 255, 255, 0.2);\n      margin: 10px;\n      flex: 1;\n      transition: 150ms;\n      transform: scale(1);\n      cursor: pointer;\n    }\n\n    >div:hover {\n      background-color: rgba(255, 255, 255, 0.4);\n      transform: scale(1.05);\n    }\n`\n\nfunction Button ({ size, text, onClick }) {\n  return (\n    <Container size={size}>\n      <div onClick={onClick}>\n        {text}\n      </div>\n    </Container>\n  )\n}\nexport default Button\n","import React, { useState, useRef, useMemo } from 'react'\nimport Button from './Button'\nimport styled from 'styled-components'\nimport stringMath from 'string-math'\nimport stringIsNumeric from 'string-is-numeric'\n\nconst Container = styled.div`\n  flex-direction: column;\n  background-color: rgba(255, 255, 255, 0.2);\n  border-radius: 10px;\n`\nconst ButtonContainer = styled.div`\nborder-radius: 10px;\n  width: 100%;\n  max-width: 600px;\n  flex-wrap: wrap;\n  background-color: rgba(255, 255, 255, 0.2);\n  align-items: space-around;\n`\n\nconst Display = styled.div`\n  overflow: scroll;\n  flex-wrap: wrap;\n  max-width: 580px;\n  align-items: flex-end;\n  padding: 10px;\n`\n\nconst Input = styled.h1`\n  color: #fff;\n  height: 42px;\n  flex: 1;\n`\n\nconst Result = styled.h1`\n  color: #fff;\n  height: 42px;\n  text-align: right;\n  animation-duration: 0.4s;\n`\n\nconst getLast = (string) => {\n  const res = string.slice(string.length - 1, string.length)\n  return res\n}\n\n// const evaluate = (value) => {\n//   setResult(stringMath(value)\n// }\n\nfunction Calculator () {\n  const [mathString, setMathString] = useState('')\n  // const [result, setResult] = useState('Banana')\n  const resultElementRef = useRef()\n\n  const callback = () => {\n\n  }\n\n  const result = useMemo(\n    () => (stringMath(mathString, callback)),\n    [mathString]\n  )\n\n  const addToMathString = (value) => {\n    // check if )\n    if (getLast(mathString) !== ')') {\n      if ((!stringIsNumeric(value)) && !stringIsNumeric(mathString.slice(-1))) { return }\n    } else {\n      // only math operator valid!\n      if (value === ')' || value === '(') { return }\n      if (stringIsNumeric(value)) {\n        setMathString(mathString + '*' + value)\n        return\n      }\n    }\n    setMathString(mathString + value)\n\n    animateResult()\n    // setResult(stringMath(mathString + value))\n  }\n\n  const clear = () => {\n    setMathString('')\n  }\n\n  const animateResult = () => {\n    console.log(resultElementRef.current)\n    resultElementRef.current.style.animationName = 'bounce'\n    const resetAnimation = () => {\n      resultElementRef.current.style.animationName = ''\n    }\n    setTimeout(resetAnimation, 400)\n  }\n\n  const padParenthesis = () => {\n    if (mathString.slice(0, 1) === '(' && mathString.slice((mathString.length) - 1) === ')') { return }\n    setMathString('(' + mathString + ')')\n  }\n\n  const removeLast = () => {\n    setMathString(mathString.slice(0, mathString.length - 1))\n  }\n\n  return (\n    <Container className='calculator'>\n      <Display>\n        <Input>{mathString}</Input>\n        <Result ref={resultElementRef}>= {result}</Result>\n      </Display>\n\n      <ButtonContainer>\n        <Button onClick={clear} size={2} text='AC' />\n        <Button onClick={removeLast} size={1} text='DEL' />\n        <Button onClick={() => addToMathString('/')} size={1} text='/' />\n        {/* New Line */}\n        <Button onClick={() => addToMathString('7')} size={1} text={7} />\n        <Button onClick={() => addToMathString('8')} size={1} text={8} />\n        <Button onClick={() => addToMathString('9')} size={1} text={9} />\n        <Button onClick={() => addToMathString('*')} size={1} text='×' />\n        {/* New Line */}\n        <Button onClick={() => addToMathString('4')} size={1} text={4} />\n        <Button onClick={() => addToMathString('5')} size={1} text={5} />\n        <Button onClick={() => addToMathString('6')} size={1} text={6} />\n        <Button onClick={() => addToMathString('+')} size={1} text='+' />\n        {/* New Line */}\n        <Button onClick={() => addToMathString('1')} size={1} text={1} />\n        <Button onClick={() => addToMathString('2')} size={1} text={2} />\n        <Button onClick={() => addToMathString('3')} size={1} text={3} />\n        <Button onClick={() => addToMathString('-')} size={1} text='-' />\n        {/* New Line */}\n        <Button onClick={() => addToMathString('.')} size={1} text='.' />\n        <Button onClick={() => addToMathString('0')} size={1} text={0} />\n        <Button onClick={() => addToMathString('(')} size={1} text='(' />\n        <Button onClick={() => addToMathString(')')} size={1} text=')' />\n        {/* New Line */}\n        <Button onClick={() => addToMathString('^')} size={1} text='^' />\n        <Button onClick={() => addToMathString('√')} size={1} text='√' />\n        <Button onClick={padParenthesis} size={2} text='(...)' />\n\n      </ButtonContainer>\n\n    </Container>\n  )\n}\nexport default Calculator\n","import React from 'react'\nimport './App.css'\nimport Calculator from '../src/components/Calculator'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  background-image: linear-gradient(rgb(175, 132, 152), rgb(201, 112, 65));\n  min-height: 100vh;\n  min-width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nfunction App () {\n  return (\n    <Container>\n      <link href='https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap' rel='stylesheet' />\n      <Calculator />\n    </Container>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}